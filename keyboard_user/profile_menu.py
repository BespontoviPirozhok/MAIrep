from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import F
from datetime import date

from .main_menu import return_to_user_menu, pretty_date
from database.requests import get_user

router = Router()


class Step(StatesGroup):
    profile_menu = State()
    rating_show = State()
    comment_show = State()
    places_show = State()


def compare_times(saved_date: tuple[int, int, int]) -> str:
    def plural_form(n: int, forms: tuple[str, str, str]) -> str:
        n = abs(n) % 100
        n1 = n % 10
        if 11 <= n <= 14:
            return forms[2]
        return forms[0] if n1 == 1 else forms[1] if 2 <= n1 <= 4 else forms[2]

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–∞—Ç—ã –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π
    saved_date = date(*saved_date)
    current_date = date.today()

    # –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
    delta_days = abs((current_date - saved_date).days)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥–æ–¥—ã, –º–µ—Å—è—Ü—ã –∏ –¥–Ω–∏ (—É—Å–ª–æ–≤–Ω—ã–µ)
    years = delta_days // 360
    remaining_days = delta_days % 360
    months = remaining_days // 30
    days = remaining_days % 30

    parts = []
    if years > 0:
        parts.append(f"{years} {plural_form(years, ('–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç'))}")
    if months > 0:
        parts.append(f"{months} {plural_form(months, ('–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤'))}")
    if days > 0 or not parts:
        parts.append(f"{days} {plural_form(days, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}")

    return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ: {' '.join(parts)}"


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —è –ø–æ–∫–∞ –Ω–µ –æ—Å–æ–±–æ –∏–º–µ—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –∂—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –ë–î
info = [
    (2023, 8, 12),  # 12 –∞–≤–≥—É—Å—Ç–∞ 2023 –≥–æ–¥–∞
    2,  # –æ—Ç–∑—ã–≤—ã
    4,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    7,  # –º–µ—Å—Ç–∞
]

profile_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {pretty_date("2025-12-3")}   ",
                callback_data="reg_date",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {info[1]}", callback_data="reviews"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {info[2]}", callback_data="comments"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç: {info[3]}", callback_data="places"
            )
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")],
    ],
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message, state: FSMContext):
    await state.set_state(Step.profile_menu)
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è üåê", reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=profile_keyboard)


@router.callback_query(F.data == "back")
async def exit(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await return_to_user_menu("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", callback.message)


@router.callback_query(F.data == "reg_date")
async def show_reg_date(callback: CallbackQuery):
    await callback.answer(compare_times(info[0]), show_alert=True)
