from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import F
from datetime import datetime

from .main_menu import return_to_user_menu

router = Router()


class Step(StatesGroup):
    profile_menu = State()
    rating_show = State()
    comment_show = State()
    places_show = State()


def beautiful_time(time: datetime) -> str:
    months_ru = [
        "—è–Ω–≤–∞—Ä—è",
        "—Ñ–µ–≤—Ä–∞–ª—è",
        "–º–∞—Ä—Ç–∞",
        "–∞–ø—Ä–µ–ª—è",
        "–º–∞—è",
        "–∏—é–Ω—è",
        "–∏—é–ª—è",
        "–∞–≤–≥—É—Å—Ç–∞",
        "—Å–µ–Ω—Ç—è–±—Ä—è",
        "–æ–∫—Ç—è–±—Ä—è",
        "–Ω–æ—è–±—Ä—è",
        "–¥–µ–∫–∞–±—Ä—è",
    ]

    day = time.day
    month = months_ru[time.month - 1]
    year = time.year
    return f"{day} {month} {year} –≥."


from datetime import datetime


def compare_times(saved_time: datetime) -> str:
    def plural_form(n: int, forms: tuple[str, str, str]) -> str:
        n = abs(n) % 100
        n1 = n % 10
        if 11 <= n <= 14:
            return forms[2]
        if n1 == 1:
            return forms[0]
        if 2 <= n1 <= 4:
            return forms[1]
        return forms[2]

    now = datetime.now()
    now = now.replace(minute=0, second=0, microsecond=0)
    saved_time = saved_time.replace(minute=0, second=0, microsecond=0)

    delta_days = (now - saved_time).days
    years = delta_days // 360
    months = (delta_days % 360) // 30
    days = (delta_days % 360) % 30

    parts = []
    if years > 0:
        parts.append(f"{years} {plural_form(years, ('–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç'))}")
    if months > 0:
        parts.append(f"{months} {plural_form(months, ('–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤'))}")
    if days > 0 or not parts:
        parts.append(f"{days} {plural_form(days, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}")

    return f"–í—ã —Å –Ω–∞–º–∏ —É–∂–µ: {' '.join(parts)}"


saved_time = datetime(1666, 8, 8, 23, 59)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
info = [
    beautiful_time(saved_time),  # [0]
    2,  # –æ—Ç–∑—ã–≤—ã
    4,  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    7,  # –º–µ—Å—Ç–∞
]

profile_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {info[0]}   ",
                callback_data="reg_date",
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {info[1]}", callback_data="reviews"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {info[2]}", callback_data="comments"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ö–æ–ª-–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç: {info[3]}", callback_data="places"
            )
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")],
    ],
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message, state: FSMContext):
    await state.set_state(Step.profile_menu)
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è üåê", reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=profile_keyboard)


@router.callback_query(F.data == "back")
async def exit(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await return_to_user_menu("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", callback.message)


@router.callback_query(F.data == "reg_date")
async def show_reg_date(callback: CallbackQuery):
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç datetime (saved_time), –∞ –Ω–µ info[0] (—Å—Ç—Ä–æ–∫–∞)
    text = compare_times(saved_time)
    await callback.answer(text, show_alert=True)
