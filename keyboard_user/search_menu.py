from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from datetime import datetime
from keyboard_user.main_menu import beautiful_time
from .main_menu import return_to_user_menu, back_reply

router = Router()


class Step(StatesGroup):
    search_input = State()
    places_list = State()
    place_view = State()
    feedback = State()
    —Åomments_list = State()


places_data = {
    "–ú–ê–ò": {
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ –ú–ê–ò",
        "rating": "5.0",
        "summary": "—Å–≤–æ–¥–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ú–ê–ò",
        "comments": {
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –¥–ª—è –ú–ê–ò": ("95 –ª–µ—Ç –ú–ê–ò, —é—Ö—É—É—É", (1930, 3, 20)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –¥–ª—è –ú–ê–ò": ("–ß–∞–ø–∞–µ–≤", (1887, 1, 28)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 3 –¥–ª—è –ú–ê–ò": ("–ü–µ—Ç—å–∫–∞", (1666, 10, 20)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 3 –¥–ª—è –ú–ê–ò": ("–°–µ–º–≥–∞-–í–µ–º–æ–Ω", (2025, 3, 18)),
        },
    },
    "–ú–ì–£": {
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ –ú–ì–£",
        "rating": "1.0",
        "summary": "—Å–≤–æ–¥–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ú–ì–£",
        "comments": {
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –¥–ª—è –ú–ì–£": ("–®—Ç–∏—Ä–ª–∏—Ü", (1900, 10, 8)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –¥–ª—è –ú–ì–£": ("–°—Ç–∞–ª–∏–Ω", (1879, 12, 21)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 3 –¥–ª—è –ú–ì–£": ("–ö–∞–ª—ã–≤–∞–Ω", (1666, 8, 3)),
        },
    },
    "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ": {
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
        "rating": "3.6",
        "summary": "—Å–≤–æ–¥–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ü–∞—Ä–∫–∞ –ì–æ—Ä—å–∫–æ–≥–æ",
        "comments": {
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –¥–ª—è –ü–∞—Ä–∫–∞ –ì–æ—Ä—å–∫–æ–≥–æ": ("–ì–æ—Ä—å–∫–∏–π", (1666, 6, 10)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –¥–ª—è –ü–∞—Ä–∫–∞ –ì–æ—Ä—å–∫–æ–≥–æ": ("–ö–∏—Å–ª—ã–π", (1666, 6, 20)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 3 –¥–ª—è –ü–∞—Ä–∫–∞ –ì–æ—Ä—å–∫–æ–≥–æ": ("–°–ª–∞–¥–∫–∏–π)", (1666, 7, 5)),
        },
    },
    "–ü–∞—Ä–∫ –ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ": {
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ –ü–∞—Ä–∫ –ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ",
        "rating": "4.9",
        "summary": "—Å–≤–æ–¥–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ü–∞—Ä–∫–∞ –ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ",
        "comments": {
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –¥–ª—è –ü–∞—Ä–∫–∞ –ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ": (
                "–≠—â–∫–µ—Ä–µ",
                (1666, 5, 30),
            ),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –¥–ª—è –ü–∞—Ä–∫–∞ –ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ": (
                "–¢–∞–º–ø–æ–Ω—ã –¥–ª—è –ê–ª–µ–Ω—ã",
                (1666, 6, 12),
            ),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 3 –¥–ª—è –ü–∞—Ä–∫–∞ –ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ": (
                "–¢–∞ —Å–∞–º–∞—è –±–µ–ª–∫–∞",
                (1666, 6, 25),
            ),
        },
    },
    "–û—Ñ–∏—Å –í–ö": {
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç–∞ –û—Ñ–∏—Å –í–ö",
        "rating": "0.0",
        "summary": "—Å–≤–æ–¥–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –û—Ñ–∏—Å –í–ö",
        "comments": {
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –¥–ª—è –û—Ñ–∏—Å –í–ö": ("–°–µ–Ω—å–æ—Ä –±–µ–∑ –æ–ø—ã—Ç–∞", (1666, 4, 18)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –¥–ª—è –û—Ñ–∏—Å –í–ö": ("–û–ø—Ä–æ–º–µ—Ç—á–∏–≤—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥", (1666, 5, 2)),
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 3 –¥–ª—è –û—Ñ–∏—Å –í–ö": ("–î—ç–±", (1666, 5, 15)),
        },
    },
}


place_view_reply = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

places_list_inline = InlineKeyboardBuilder()
for place in places_data.keys():
    places_list_inline.row(InlineKeyboardButton(text=place, callback_data=place))
places_list_inline.row(
    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_search")
)


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç")
async def search(message: Message, state: FSMContext):
    await state.set_state(Step.search_input)
    await message.answer(
        """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- –ú–æ—Å–∫–≤–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ)""",
        reply_markup=back_reply,
    )


@router.message(Step.search_input, F.text == "–ù–∞–∑–∞–¥")
async def exit(message: Message, state: FSMContext):
    await state.clear()
    await return_to_user_menu("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", message)


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ "–ú–æ—Å–∫–≤–∞" ----------, —Ç—É—Ç –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∫–∞—Ä—Ç—ã –∏ –ø–æ—Ç–æ–º —É–∂–µ —á–µ—Ç–æ –∏–∑ –Ω–∏—Ö –ø–æ–ª—É—á–∞—Ç—å
@router.message(Step.search_input, F.text.casefold() == "–º–æ—Å–∫–≤–∞")
async def inline_places(message: Message, state: FSMContext):
    await state.set_state(Step.places_list)
    await message.answer("–ò—â–µ–º –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö üëÄ", reply_markup=ReplyKeyboardRemove())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=places_list_inline.as_markup()
    )


async def search_request(message: Message, state: FSMContext):
    await state.set_state(Step.places_list)
    await inline_places(message, state)


@router.message(Step.search_input)
async def unknown_city(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –ø–æ –ú–æ—Å–∫–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ '–ú–æ—Å–∫–≤–∞'"
    )


@router.callback_query(F.data == "back_to_search")
async def back_to_search_step(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Step.search_input)

    await callback.message.edit_text(
        """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- –ú–æ—Å–∫–≤–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ)"""
    )
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø–æ–∏—Å–∫—É:",
        reply_markup=back_reply,
    )
    await callback.answer()


@router.callback_query(Step.places_list)
async def place_chosen(callback: CallbackQuery, state: FSMContext):
    data = callback.data

    if data == "back_to_search":
        return
    place = data
    if place not in places_data:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ", show_alert=True)
        return

    await state.set_state(Step.place_view)
    await state.update_data(current_place=place)

    d = places_data[place]
    text = (
        f"{place}\n\n"
        f"{d['description']}\n"
        f"–†–µ–π—Ç–∏–Ω–≥: {d['rating']}\n\n"
        f"{d['summary']}"
    )

    await callback.message.edit_reply_markup(None)
    await callback.message.answer(text, reply_markup=place_view_reply)
    await callback.answer()


@router.message(Step.place_view, F.text == "–ù–∞–∑–∞–¥")
async def back_to_places_list(message: Message, state: FSMContext):
    await state.set_state(Step.places_list)
    await message.answer(
        "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ...", reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=places_list_inline.as_markup(),
    )


@router.message(Step.—Åomments_list, F.text == "–ù–∞–∑–∞–¥")
async def back_from_comments(message: Message, state: FSMContext):
    await state.set_state(Step.place_view)
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ.", reply_markup=place_view_reply
    )


# 4) ¬´–æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ¬ª
@router.message(Step.place_view, F.text == "–û—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ")
async def mark_visited(message: Message, state: FSMContext):
    await message.answer(
        "–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–∏–∞–ª–æ–≥ –æ—Ü–µ–Ω–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ —Ç–∏–º–ª–∏–¥ —á–µ—Ç–æ –∑–∞—Ö–æ—Ç–µ–ª —Å–ø–∞—Ç–∫–∏",
        reply_markup=place_view_reply,
    )


@router.message(Step.place_view, F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
async def show_comments(message: Message, state: FSMContext):
    data = await state.get_data()
    place = data.get("current_place")
    await state.set_state(Step.—Åomments_list)
    for comment, (user, dt) in places_data[place]["comments"].items():
        await message.answer(
            f"{user}, {beautiful_time(datetime(*dt))}\n{comment}",
            reply_markup=back_reply,
        )
