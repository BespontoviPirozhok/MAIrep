from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboard_user.main_menu import return_to_user_menu, back_reply

from database.requests import get_places, get_current_place

router = Router()


class Step(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏—è
    search_input = State()  # –ø–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    places_list = State()  # —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–¥–∞—á–µ
    place_view = State()  # –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ


place_view_reply = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

place_view_reply_visited = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–µ—Å—Ç–æ —É–∂–µ –ø–æ—Å–µ—â–µ–Ω–æ ‚úÖ")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
    is_persistent=True,
)

async def places():
    all_places = await get_places()
    places_list_inline = InlineKeyboardBuilder()
    for place in all_places:
        places_list_inline.row(InlineKeyboardButton(text=place.name, callback_data=place.name))
    places_list_inline.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_search")
    )
    return places_list_inline


async def get_place_info_text(place_name: str) -> str:
    place = await get_current_place(place_name)
    return (
        f"{place.name}\n\n"
        f"{place.adress}\n"
        f"{place.description}\n"
        f"–†–µ–π—Ç–∏–Ω–≥: {place.summary_rating}\n\n"
        # f"{place_data['summary']}"
    )


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç")
async def search(message: Message, state: FSMContext):
    await state.set_state(Step.search_input)
    await message.answer(
        """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- –ú–æ—Å–∫–≤–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ)""",
        reply_markup=back_reply,
    )


@router.message(Step.search_input, F.text == "–ù–∞–∑–∞–¥")
async def exit(message: Message, state: FSMContext):
    await state.clear()
    await return_to_user_menu("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", message)


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ "–ú–æ—Å–∫–≤–∞" ----------, —Ç—É—Ç –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∫–∞—Ä—Ç—ã –∏ –ø–æ—Ç–æ–º —É–∂–µ —á–µ—Ç–æ –∏–∑ –Ω–∏—Ö –ø–æ–ª—É—á–∞—Ç—å
@router.message(Step.search_input, F.text.casefold() == "–º–æ—Å–∫–≤–∞")
async def inline_places(message: Message, state: FSMContext):
    await state.set_state(Step.places_list)
    await message.answer("–ò—â–µ–º –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö üëÄ", reply_markup=ReplyKeyboardRemove())
    keyboard = await places()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard.as_markup()
    )

async def search_request(message: Message, state: FSMContext):
    await state.set_state(Step.places_list)
    await inline_places(message, state)


@router.message(Step.search_input)
async def unknown_city(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –ø–æ –ú–æ—Å–∫–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ '–ú–æ—Å–∫–≤–∞'"
    )

@router.callback_query(Step.places_list)
async def place_chosen(callback: CallbackQuery, state: FSMContext):
    if callback.data == "back_to_search":
        await state.set_state(Step.search_input)
        await callback.message.edit_text(
            """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        - –ú–æ—Å–∫–≤–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ)"""
        )
        await callback.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø–æ–∏—Å–∫—É:",
            reply_markup=back_reply,
        )
        await callback.answer()
        return

    await state.set_state(Step.place_view)
    await state.update_data(current_place=callback.data)
    await callback.message.delete()
    await callback.message.answer(
        await get_place_info_text(callback.data),
        reply_markup=place_view_reply
    )


@router.message(Step.place_view, F.text == "–ù–∞–∑–∞–¥")
async def back_to_places_list(message: Message, state: FSMContext):
    await state.set_state(Step.places_list)
    await message.answer(
        "–°–º–æ—Ç—Ä–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞...", reply_markup=ReplyKeyboardRemove()
    )
    keyboard = await places()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboard.as_markup(),
    )
<<<<<<< HEAD


@router.message(Step.—Åomments_list, F.text == "–ù–∞–∑–∞–¥")
async def back_from_comments(message: Message, state: FSMContext):
    await state.set_state(Step.place_view)
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ.", reply_markup=place_view_reply
    )


@router.message(Step.place_view, F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
async def show_comments(message: Message, state: FSMContext):
    data = await state.get_data()
    place_id = data.get("current_place_id")
    await state.set_state(Step.—Åomments_list)

    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    comments = await get_comments(place_id=place_id)
    all_comments = sorted(
        comments,
        key=lambda x: x.comment_date,  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–∫–æ—Ä—Ç–µ–∂ (–≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å))
        reverse=True,
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    await state.update_data(all_comments=all_comments, comment_offset=0)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
    await show_more_comments(message, state)


async def show_more_comments(message: Message, state: FSMContext):
    data = await state.get_data()
    all_comments = data["all_comments"]
    offset = data["comment_offset"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    BATCH_SIZE = 5
    comments_batch = all_comments[offset : offset + BATCH_SIZE]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    for comment, (text, date_tuple) in comments_batch:
        await message.answer(
            f"{text}, {beautiful_date(date_tuple)}\n{comment}",
            reply_markup=(
                ReplyKeyboardRemove()
                if offset + BATCH_SIZE >= len(all_comments)
                else None
            ),
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º offset
    new_offset = offset + BATCH_SIZE
    await state.update_data(comment_offset=new_offset)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if new_offset < len(all_comments):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        more_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
        )
        await message.answer(
            f"–ü–æ–∫–∞–∑–∞–Ω–æ {min(new_offset, len(all_comments))} –∏–∑ {len(all_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            reply_markup=more_keyboard,
        )
    else:
        await message.answer("‚úÖ –ë–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç", reply_markup=back_reply)


@router.message(Step.—Åomments_list, F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")
async def load_more_comments(message: Message, state: FSMContext):
    await show_more_comments(message, state)
=======
>>>>>>> 4e7f20b (–∑–∞—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–ª –∫–æ–º–º–µ–Ω—Ç—ã, –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–∫–ª—é—á–∏–ª –æ—Ç–∑—ã–≤—ã)
