from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .main_menu import return_to_user_menu

router = Router()


class Step(StatesGroup):
    search_input = State()
    places_list = State()
    place_view = State()
    —Åomments_list = State()


Moscow_places = [
    "–ú–ê–ò",
    "–ú–ì–£",
    "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
    "–ü–∞—Ä–∫ –ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ-–°—Ç—Ä–µ—à–Ω–µ–≤–æ",
    "–û—Ñ–∏—Å –í–ö",
    "–¶–µ–Ω—Ç—Ä",
    "–í–î–ù–•",
    "–õ—É–∂–Ω–∏–∫–∏",
    "–û—Å—Ç–∞–Ω–∫–∏–Ω–æ",
    "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏",
    "–¢—Ä–µ—Ç—å—è–∫–æ–≤–∫–∞",
    "–ê—Ä–±–∞—Ç",
]


search_input_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ "üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç" ----------
@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç")
async def search(message: Message, state: FSMContext):
    await state.set_state(Step.search_input)
    await message.answer(
        """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- –ú–æ—Å–∫–≤–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ)""",
        reply_markup=search_input_keyboard,
    )


# ---------- –ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∏—Å–∫–∞ ----------
@router.message(Step.search_input, F.text == "–ù–∞–∑–∞–¥")
async def exit(message: Message, state: FSMContext):
    await state.clear()
    await return_to_user_menu("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", message)


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ "–ú–æ—Å–∫–≤–∞" ----------
@router.message(Step.search_input, F.text.casefold() == "–º–æ—Å–∫–≤–∞")
async def search_request(message: Message, state: FSMContext):
    await state.set_state(Step.places_list)
    await inline_places(message, state)  # –ø—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã


# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ ----------
@router.message(Step.search_input)
async def unknown_city(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –ø–æ –ú–æ—Å–∫–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ '–ú–æ—Å–∫–≤–∞'."
    )


@router.message(Step.places_list)
async def inline_places(message: Message, state: FSMContext):
    await state.set_state(Step.place_view)

    keyboard = InlineKeyboardBuilder()
    for place in Moscow_places[:4]:
        keyboard.row(InlineKeyboardButton(text=place, callback_data=f"place_{place}"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_search"))

    # –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∞–∫—Ç–∏–≤–Ω–∞)
    await message.answer("–ò—â–µ–º –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö üëÄ", reply_markup=ReplyKeyboardRemove())

    # –ü–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboard.as_markup(),
    )


# ---------- Callback: –ù–∞–∑–∞–¥ –∏–∑ inline —Å–ø–∏—Å–∫–∞ ----------
@router.callback_query(F.data == "back_to_search")
async def back_to_search_step(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Step.search_input)

    # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∏—Å–∫—É
    await callback.message.edit_text(
        """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- –ú–æ—Å–∫–≤–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ)"""
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ù–∞–∑–∞–¥"
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø–æ–∏—Å–∫—É:",
        reply_markup=search_input_keyboard,
    )
    await callback.answer()


# ---------- –ù–∞–∑–∞–¥ –∏–∑ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ ----------
@router.message(Step.place_view, F.text == "–ù–∞–∑–∞–¥")
async def back_from_place_list(message: Message, state: FSMContext):
    await state.set_state(Step.search_input)
    await message.answer(
        """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- –ú–æ—Å–∫–≤–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ)""",
        reply_markup=search_input_keyboard,
    )
