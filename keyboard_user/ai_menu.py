from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F

from .main_menu import return_to_user_menu

router = Router()


class Step(StatesGroup):
    ai_chat = State()
    ai_advice = State()


ai_chat_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω üòé")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
    resize_keyboard=True,
    is_persistent=True,
)

ai_advice_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î—Ä—É–≥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
)


@router.message(F.text == "ü§ñ –ß–∞—Ç —Å –ò–ò")
async def help(message: Message, state: FSMContext):
    await state.set_state(Step.ai_chat)
    await message.answer(
        """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å –ò–ò, –≤–æ—Ç —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç:
- –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –Ω–∞—à–∏–º –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–±—Ä–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞ ‚¨áÔ∏è
- –° –æ–ø—Ü–∏–µ–π "–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω üòé" –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–∞–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ 5-—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö"
        """,
        reply_markup=ai_chat_keyboard,
    )


@router.message(Step.ai_chat, F.text == "–ù–∞–∑–∞–¥")
async def exit(message: Message, state: FSMContext):
    await state.clear()
    await return_to_user_menu(message.from_user.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", message)


@router.message(Step.ai_chat, F.text == "–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω üòé")
async def ai_advice_request(message: Message, state: FSMContext):
    await state.set_state(Step.ai_advice)
    await message.answer(
        "–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        reply_markup=ai_advice_keyboard,
    )


@router.message(Step.ai_advice, F.text == "–ù–∞–∑–∞–¥")
async def ai_advice_back(message: Message, state: FSMContext):
    await state.set_state(Step.ai_chat)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø–æ–±–æ–ª—Ç–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç",
        reply_markup=ai_chat_keyboard,
    )


@router.message(Step.ai_advice, F.text == "–î—Ä—É–≥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
async def ai_advice_back(message: Message, state: FSMContext):
    await message.answer(
        "–¢—É—Ç –¥–æ–ª–∂–Ω–∞—è –±—ã—Ç—å –¥—Ä—É–≥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
        reply_markup=ai_advice_keyboard,
    )


@router.message(Step.ai_chat)
async def sending_message_to_ai(message: Message, state: FSMContext):
    request_to_ai = message.text
    print(request_to_ai)
    await message.answer_sticker(
        r"CAACAgIAAxkBAAEOZD9oEnDFvWYOx4FG4HSPqijWCx8iPwACqGAAAn_xWUq5KNvV3mYaEDYE"
    )
