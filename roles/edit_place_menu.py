from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from datetime import date
from roles.roles_main import user_check, manager_check
from database.requests import add_comment, get_comments, delete_comment, get_place
from keyboard_user.search_menu import place_view_smart_reply, get_place_info_text


router = Router()


class Step(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏—è
    place_view = State()
    edit_place = State()
    edit_place_confirm = State()


async def get_smart_desc_edit_menu(
    message: Message, place_name: str, place_description: str
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Å—Ç–∞
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è aiogram
    :param place_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ (—Å—Ç—Ä–æ–∫–∞)
    :param place_description: –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ (—Å—Ç—Ä–æ–∫–∞)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏
    if not place_description:
        main_text = f"üì≠ –£ –º–µ—Å—Ç–∞ *{place_name}* –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è. –ß—Ç–æ–±—ã –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ"
        button_text = "–û—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    else:
        main_text = (
            f"üìÑ –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *{place_name}* (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ):\n"
            f"\n`{place_description}`\n\n\n"
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â–∏–π:"
        )
        button_text = "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text, callback_data="skip_edit_description"
                )
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        main_text,
        reply_markup=keyboard,
        parse_mode="MARKDOWN",
    )


async def get_category_keyboard(description: str) -> InlineKeyboardMarkup:
    if len(description) > 0:
        button_text = "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    else:
        button_text = "–ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"

    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text, callback_data="skip_edit_description"
                )
            ]
        ]
    )


@router.message(Step.place_view, F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ")
async def edit_description(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    if await manager_check(tg_id):
        await state.set_state(Step.edit_place)
        await message.answer(
            "–ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ", reply_markup=ReplyKeyboardRemove()
        )
        data = await state.get_data()
        place_id = data.get("place_id")
        places_search_result = await get_place(place_id=place_id)
        place_name = places_search_result.name
        place_description = places_search_result.description
        await get_smart_desc_edit_menu(message, place_name, place_description)
