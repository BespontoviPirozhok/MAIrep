import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, or_f
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "7361559221:AAFqDqzF0ZDOgzLS3nTva84JCo90b-UT_oE"

DATA_FILE = "locals.json"

def load_locals():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_locals():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(locals_dict, f, ensure_ascii=False, indent=2)

locals_dict = load_locals()

locals_dict.setdefault("–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", {
    "rating": 4.5,
    "votes": 2,
    "comments": ["–ö—Ä–∞—Å–∏–≤–æ–µ –º–µ—Å—Ç–æ!", "–°–æ–≤–µ—Ç—É—é –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫"],
    "visited": False
})

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()

class NewLocalForm(StatesGroup):
    waiting_for_place_name = State()
    waiting_for_new_note = State()
    waiting_for_new_comment = State()
    waiting_for_searching = State()
    waiting_for_mark_visited = State()

def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=" –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"), KeyboardButton(text=" –û—Ü–µ–Ω–∏—Ç—å")],
            [KeyboardButton(text=" –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"), KeyboardButton(text=" –ü–æ–∏—Å–∫")],
            [KeyboardButton(text="–ü–æ—Å–µ—Ç–∏–ª"), KeyboardButton(text=" –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

def get_cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–µ—Å—Ç–∞–º–∏ –¥–ª—è –¥–æ—Å—É–≥–∞.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb()
    )

@dp.message(or_f(Command("help"), F.text.lower() == "–ø–æ–º–æ—â—å"))
async def cmd_help(message: types.Message):
    help_text = """
<b> –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

 –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
–û—Ü–µ–Ω–∏—Ç—å - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –º–µ—Å—Ç—É (1-5)
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
–ü–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
–ü–æ—Å–µ—Ç–∏–ª - –æ—Ç–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω–æ–µ

–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å ‚ùå –û—Ç–º–µ–Ω–∞
"""
    await message.answer(help_text, reply_markup=get_main_kb())

@dp.message(or_f(Command("newlocals"), F.text.lower().contains("–¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")))
async def cmd_newlocals(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(NewLocalForm.waiting_for_place_name)

@dp.message(NewLocalForm.waiting_for_place_name)
async def process_place_name(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
        await state.clear()
        return

    place_name = message.text.strip()
    if not place_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!", reply_markup=get_cancel_kb())
        return

    locals_dict[place_name] = {
        'rating': 0,
        'votes': 0,
        'comments': [],
        'visited': False
    }
    save_locals()
    await message.answer(
        f"‚úÖ –ú–µ—Å—Ç–æ <b>'{place_name}'</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_kb()
    )
    await state.clear()

@dp.message(or_f(Command("note"), F.text.lower().contains("–æ—Ü–µ–Ω–∏—Ç—å")))
async def cmd_note(message: types.Message, state: FSMContext):
    await message.answer(
        "‚≠ê –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5) –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ - 4</code>",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(NewLocalForm.waiting_for_new_note)

@dp.message(NewLocalForm.waiting_for_new_note)
async def process_new_note(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
        await state.clear()
        return

    try:
        name, note = message.text.split('-', 1)
        name = name.strip()
        note = int(note.strip())

        if name not in locals_dict:
            await message.answer(f"‚ùå –ú–µ—Å—Ç–æ <b>'{name}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=get_main_kb())
            return

        if note < 1 or note > 5:
            await message.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5!", reply_markup=get_cancel_kb())
            return

        place = locals_dict[name]
        new_rating = (place['rating'] * place['votes'] + note) / (place['votes'] + 1)
        place['rating'] = round(new_rating, 1)
        place['votes'] += 1
        save_locals()

        await message.answer(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞ –¥–ª—è –º–µ—Å—Ç–∞ <b>'{name}'</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"üìä –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {place['rating']} ({place['votes']} –æ—Ü–µ–Ω–æ–∫)",
            reply_markup=get_main_kb()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ - 4</code>",
            reply_markup=get_cancel_kb()
        )
    finally:
        await state.clear()

@dp.message(or_f(Command("comment"), F.text.lower().contains("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")))
async def cmd_comment(message: types.Message, state: FSMContext):
    await message.answer(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ - –í–∞—à —Ç–µ–∫—Å—Ç</code>",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(NewLocalForm.waiting_for_new_comment)

@dp.message(NewLocalForm.waiting_for_new_comment)
async def process_new_comment(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
        await state.clear()
        return

    try:
        name, comment = message.text.split('-', 1)
        name = name.strip()
        comment = comment.strip()

        if not name or not comment:
            raise ValueError

        if name not in locals_dict:
            await message.answer(f"‚ùå –ú–µ—Å—Ç–æ <b>'{name}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=get_main_kb())
            return

        locals_dict[name]['comments'].append(comment)
        save_locals()
        await message.answer(
            f"‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–µ—Å—Ç—É <b>'{name}'</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
            reply_markup=get_main_kb()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ - –í–∞—à —Ç–µ–∫—Å—Ç</code>",
            reply_markup=get_cancel_kb()
        )
    finally:
        await state.clear()

@dp.message(or_f(Command("search"), F.text.lower().contains("–ø–æ–∏—Å–∫")))
async def cmd_search(message: types.Message, state: FSMContext):
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(NewLocalForm.waiting_for_searching)

@dp.message(NewLocalForm.waiting_for_searching)
async def process_search(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
        await state.clear()
        return

    name = message.text.strip()
    if name in locals_dict:
        place = locals_dict[name]
        comments = "\n".join([f"‚Ä¢ {c}" for c in place['comments']]) if place['comments'] else "–ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
        visited_status = "‚úÖ –î–∞" if place.get("visited") else "‚ùå –ù–µ—Ç"

        info = (
            f"üìå <b>{name}</b>\n\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {place['rating']}/5 (–Ω–∞ –æ—Å–Ω–æ–≤–µ {place['votes']} –æ—Ü–µ–Ω–æ–∫)\n"
            f"üö∂ –ü–æ—Å–µ—â–µ–Ω–æ: {visited_status}\n\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comments}"
        )
        await message.answer(info, reply_markup=get_main_kb())
    else:
        await message.answer(f"‚ùå –ú–µ—Å—Ç–æ <b>'{name}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=get_main_kb())
    await state.clear()

@dp.message(or_f(Command("visited"), F.text.lower().contains("–ø–æ—Å–µ—Ç–∏–ª")))
async def cmd_visited(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ—Å–µ—Ç–∏–ª–∏:",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(NewLocalForm.waiting_for_mark_visited)

@dp.message(NewLocalForm.waiting_for_mark_visited)
async def process_visited(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())
        await state.clear()
        return

    name = message.text.strip()
    if name in locals_dict:
        locals_dict[name]['visited'] = True
        save_locals()
        await message.answer(f"‚úÖ –ú–µ—Å—Ç–æ <b>'{name}'</b> –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω–æ–µ!", reply_markup=get_main_kb())
    else:
        await message.answer(f"‚ùå –ú–µ—Å—Ç–æ <b>'{name}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=get_main_kb())
    await state.clear()

@dp.message(or_f(F.text.lower() == "–æ—Ç–º–µ–Ω–∞", F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∞"))
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã", reply_markup=get_main_kb())
        return

    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_kb())

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="newlocals", description="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"),
        BotCommand(command="note", description="–û—Ü–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ"),
        BotCommand(command="comment", description="–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
        BotCommand(command="search", description="–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞"),
        BotCommand(command="visited", description="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω–æ–µ")
    ]
    await bot.set_my_commands(commands)

async def on_startup(bot: Bot):
    save_locals()
    await set_bot_commands(bot)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
