from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from roles.roles_main import (
    get_user_status_text,
    get_user,
    admin_check,
)

from database.requests import get_full_comment_data_by_user, get_user, get_events

from map_and_events.kudago import cities_kudago, pretty_date

router = Router()


class Step(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏—è
    place_search = State()
    event_search = State()
    profile_menu = State()
    ai_chat = State()
    admin_menu = State()


back_reply = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
    is_persistent=True,
)


main_menu_reply = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç"),
            KeyboardButton(text="üèùÔ∏è –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
        ],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="ü§ñ –ß–∞—Ç —Å –ò–ò")],
    ],
    is_persistent=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
)

admin_menu_reply = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç"),
            KeyboardButton(text="üèùÔ∏è –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
        ],
        [
            KeyboardButton(text="‚ìÇÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é"),
            KeyboardButton(text="ü§ñ –ß–∞—Ç —Å –ò–ò"),
        ],
    ],
    is_persistent=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
)


async def return_to_user_menu(
    msg_txt: str, message: Message, tg_id: int = None
) -> None:
    if not tg_id:
        tg_id = message.from_user.id
    if await admin_check(tg_id):
        await message.answer(
            msg_txt,
            reply_markup=admin_menu_reply,
        )
    else:
        await message.answer(
            msg_txt,
            reply_markup=main_menu_reply,
        )


async def search_places(message: Message, state: FSMContext):
    await state.set_state(Step.place_search)
    await message.answer(
        """
–†—è–¥–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫:
‚úÖ - –í—ã —É–∂–µ –ø–æ—Å–µ—Ç–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ;
üåé - –ú–µ—Å—Ç–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏;
üåê - –ú–µ—Å—Ç–∞ –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Ç—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å.
–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, –∑–Ω–∞—á–∏—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.
""",
    )
    await message.answer(
        """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏
""",
        reply_markup=back_reply,
    )


async def cities_kb_def(state):
    data = await state.get_data()
    city_eng = data.get("city_eng", "msk")
    city_dict = await cities_kudago()
    cities_keyboard = []
    for city_rus_dict, city_eng_dict in city_dict.items():
        if city_eng == city_eng_dict:
            continue
        cities_keyboard.append(
            [
                InlineKeyboardButton(
                    text=city_rus_dict,
                    callback_data=f"city_{city_rus_dict}_{city_eng_dict}",
                )
            ]
        )
    return InlineKeyboardMarkup(inline_keyboard=cities_keyboard)


async def event_searching(message: Message, state: FSMContext):
    data = await state.get_data()
    city_rus = data.get("city_rus", "–ú–æ—Å–∫–≤–∞")

    await state.set_state(Step.event_search)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ - *{city_rus}*",
        reply_markup=await cities_kb_def(state),
        parse_mode="Markdown",
    )
    await message.answer(
        f"üîé *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n–ï—Å–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, –∑–Ω–∞—á–∏—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.*",
        reply_markup=back_reply,
        parse_mode="Markdown",
    )


async def ai_chat(message: Message, state: FSMContext):
    await state.set_state(Step.ai_chat)
    await message.answer(
        """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å –ò–ò, –≤–æ—Ç —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç:
- –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –Ω–∞—à–∏–º –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–±—Ä–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞ ‚¨áÔ∏è
- –° –æ–ø—Ü–∏–µ–π "–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω üòé" –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–∞–º –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ 5-—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –±–æ—Ç –ø–∏—à–µ—Ç –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."
        """,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω üòé")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")],
            ],
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
            resize_keyboard=True,
            is_persistent=True,
        ),
    )


async def profile_keyboard(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    user_info = await get_user(tg_id)
    reg_date = user_info.regist_date
    await state.update_data(reg_date=reg_date)
    status_text = await get_user_status_text(tg_id)
    all_comments = (await get_full_comment_data_by_user(tg_id))[::-1]
    await state.update_data(all_comments=all_comments)
    ratings = [c for c in all_comments if c.commentator_rating != 0]
    await state.update_data(ratings=ratings)
    comments = [c for c in all_comments if c.comment_text != ""]
    await state.update_data(comments=comments)
    events = await get_events(tg_id)
    await state.update_data(events=events)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"    –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {pretty_date(str(reg_date))}    ",
                    callback_data="reg_date",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–ü–æ—Å–µ—â—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞: {len(all_comments)}",
                    callback_data="visits",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–û—Ü–µ–Ω–∫–∏: {len(ratings)}", callback_data="ratings"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(comments)}",
                    callback_data="comments",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {len(events)}", callback_data="events"
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        ]
    )
    await message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å: {status_text}", reply_markup=keyboard)


async def profile(message: Message, state: FSMContext):
    await state.set_state(Step.profile_menu)
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è üåê", reply_markup=ReplyKeyboardRemove()
    )
    await profile_keyboard(message, state)


admin_extended_reply = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            KeyboardButton(text="–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"),
        ],
        [
            KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é"),
        ],
    ],
    is_persistent=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
)


async def admin_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not await admin_check(user_id):
        user_role = await get_user_status_text(user_id)
        await return_to_user_menu(
            f"–í—ã - {user_role}, –≤–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é!", message
        )
    else:
        await state.set_state(Step.admin_menu)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é!",
            reply_markup=admin_extended_reply,
        )
