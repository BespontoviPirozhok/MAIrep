from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from roles.roles_main import manager_check
from database.requests import get_place, update_place
from user_interface.search_menu import place_view_smart_reply, get_place_info_text
from user_interface.feedback_menu import feedback_confirm_reply


router = Router()


class Step(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏—è
    place_view = State()
    edit_category = State()
    edit_description = State()
    edit_place_confirm = State()


async def custom_place_info(
    place_name: str, place_category: str, place_description: str
) -> str:
    a = "*"
    return f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
*{place_name}*
    
–û—Ü–µ–Ω–∫–∞: ?

–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {place_category}
            
–ê–¥—Ä–µ—Å: ?
            
–û–ø–∏—Å–∞–Ω–∏–µ: {place_description}

–°–≤–æ–¥–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ?

? - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""


async def get_smart_desc_edit_menu(
    obj,  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–±—ä–µ–∫—Ç –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞
    place_name: str,
    place_description: str,
):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏
    if not place_description:
        main_text = f"üì≠ –£ –º–µ—Å—Ç–∞ *{place_name}* –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è. –ß—Ç–æ–±—ã –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ"
        button_text = "–û—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    else:
        main_text = (
            f"üìÑ –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *{place_name}* (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ):\n"
            f"\n`{place_description}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â–∏–π:"
        )
        button_text = "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text, callback_data="skip_edit_description"
                )
            ]
        ]
    )

    if isinstance(obj, CallbackQuery):
        # –î–ª—è CallbackQuery: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await obj.message.edit_text(
            main_text, reply_markup=keyboard, parse_mode="MARKDOWN"
        )
        await obj.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    elif isinstance(obj, Message):
        # –î–ª—è Message: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await obj.answer(main_text, reply_markup=keyboard, parse_mode="MARKDOWN")


async def get_smart_category_edit_menu(
    message: Message,
    place_name: str,
    place_category: str,
):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏
    if not place_category:
        main_text = f"üì≠ –£ –º–µ—Å—Ç–∞ *{place_name}* –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–µ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ"
        button_text = "–û—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    else:
        main_text = (
            f"üìÑ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ—Å—Ç–∞ *{place_name}* (–¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ):\n"
            f"\n`{place_category}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â—É—é:"
        )
        button_text = "–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text, callback_data="skip_edit_category"
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_place_view")],
        ],
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        main_text,
        reply_markup=keyboard,
        parse_mode="MARKDOWN",
    )


@router.message(Step.place_view, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ")
async def edit_description(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    if await manager_check(tg_id):
        await state.set_state(Step.edit_category)
        await message.answer(
            "–ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ", reply_markup=ReplyKeyboardRemove()
        )
        data = await state.get_data()
        place_id = data.get("place_id")
        place_name = data.get("place_name")
        places_search_result = await get_place(place_id=place_id)
        place_category = places_search_result.category
        place_description = places_search_result.description
        await state.update_data(
            place_description=place_description, place_category=place_category
        )
        await get_smart_category_edit_menu(message, place_name, place_category)
    else:
        data = await state.get_data()
        place_id = data.get("place_id")
        await message.answer(
            "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ",
            reply_markup=await place_view_smart_reply(tg_id, place_id),
        )


@router.callback_query(Step.edit_category, F.data == "back_to_place_view")
async def back_from_place_edit(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Step.place_view)
    data = await state.get_data()
    place_id = data.get("place_id")
    await callback.message.delete()
    place_info = await get_place_info_text(place_id=place_id)
    await callback.message.answer(
        place_info,
        reply_markup=await place_view_smart_reply(callback.from_user.id, place_id),
        parse_mode="MARKDOWN",
    )
    await callback.answer()


@router.message(Step.edit_category)
async def edit_category(message: Message, state: FSMContext):
    category = message.text
    await state.set_state(Step.edit_description)
    await state.update_data(place_category=category)
    data = await state.get_data()
    place_name = data.get("place_name")
    place_description = data.get("place_description")
    await get_smart_desc_edit_menu(
        obj=message,
        place_name=place_name,
        place_description=place_description,
    )


@router.callback_query(Step.edit_category, F.data == "skip_edit_category")
async def skip_category(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Step.edit_description)
    data = await state.get_data()
    place_name = data.get("place_name")
    place_description = data.get("place_description")
    await get_smart_desc_edit_menu(
        obj=callback,
        place_name=place_name,
        place_description=place_description,
    )


@router.callback_query(Step.edit_description, F.data == "skip_edit_description")
async def skip_category(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Step.edit_place_confirm)
    data = await state.get_data()
    place_name = data.get("place_name")
    place_category = data.get("place_category")
    place_description = data.get("place_description")
    await callback.message.answer(
        text=await custom_place_info(place_name, place_category, place_description),
        reply_markup=feedback_confirm_reply,
        parse_mode="MARKDOWN",
    )
    await callback.answer()


@router.message(Step.edit_description)
async def edit_category(message: Message, state: FSMContext):
    await state.set_state(Step.edit_place_confirm)
    new_description = message.text
    await state.update_data(place_description=new_description)
    data = await state.get_data()
    place_name = data.get("place_name")
    place_category = data.get("place_category")
    await message.answer(
        text=await custom_place_info(place_name, place_category, new_description),
        reply_markup=feedback_confirm_reply,
        parse_mode="MARKDOWN",
    )


@router.message(Step.edit_place_confirm, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def back_from_feedback(message: Message, state: FSMContext):
    await state.set_state(Step.place_view)
    data = await state.get_data()
    place_id = data.get("place_id")
    place_info = await get_place_info_text(place_id)
    await message.answer(
        place_info,
        reply_markup=await place_view_smart_reply(message.from_user.id, place_id),
        parse_mode="MARKDOWN",
    )
    await state.update_data(place_category=None, place_description=None)


@router.message(Step.edit_place_confirm, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def edit_place_info_again(message: Message, state: FSMContext):
    await state.set_state(Step.edit_category)
    await message.answer(
        "–ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ", reply_markup=ReplyKeyboardRemove()
    )
    data = await state.get_data()
    place_id = data.get("place_id")
    place_name = data.get("place_name")
    places_search_result = await get_place(place_id=place_id)
    place_category = places_search_result.category
    place_description = places_search_result.description
    await state.update_data(
        place_description=place_description, place_category=place_category
    )
    await get_smart_category_edit_menu(message, place_name, place_category)


@router.message(Step.edit_place_confirm, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def edit_place_confirm(message: Message, state: FSMContext):
    await state.set_state(Step.place_view)

    data = await state.get_data()
    place_id = data.get("place_id")
    places_search_result = await get_place(place_id=place_id)
    place_category_manager = data.get("place_category")
    place_description_manager = data.get("place_description")
    place_category_db = places_search_result.category
    place_description_db = places_search_result.description
    if (
        place_category_manager == place_category_db
        and place_description_manager == place_description_db
    ):
        await message.answer("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏, –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏")
    elif place_category_manager == place_category_db:
        await update_place(place_id=place_id, new_description=place_description_manager)
        await message.answer("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π")
    elif place_description_manager == place_description_db:
        await update_place(place_id=place_id, new_category=place_category_manager)
        await message.answer("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–∂–Ω–∏–º")
    else:
        await update_place(
            place_id=place_id,
            new_category=place_category_manager,
            new_description=place_description_manager,
        )
        await message.answer("–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞")
    await state.update_data(place_description=None, place_category=None)
    place_info = await get_place_info_text(place_id=place_id)

    await message.answer(
        place_info,
        reply_markup=await place_view_smart_reply(message.from_user.id, place_id),
        parse_mode="MARKDOWN",
    )
