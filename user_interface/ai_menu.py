from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F

from .main_menu import return_to_user_menu
from ai_services.yandex_gpt import chat, recom, you_mean
from database.requests import get_full_comment_data_by_user, get_user
from user_interface.aka_backend import ai_chat

router = Router()


class Step(StatesGroup):
    ai_chat = State()


ai_chat_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω üòé")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
    resize_keyboard=True,
    is_persistent=True,
)


@router.message(F.text == "ü§ñ –ß–∞—Ç —Å –ò–ò")
async def start_ai_chat(message: Message, state: FSMContext):
    await ai_chat(message, state)


@router.message(Step.ai_chat, F.text == "–ù–∞–∑–∞–¥")
async def exit(message: Message, state: FSMContext):
    await state.clear()
    await return_to_user_menu(message.from_user.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", message)


@router.message(Step.ai_chat, F.text == "–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω üòé")
async def ai_advice_request(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    data = await state.get_data()
    last_visited_places = data.get("recomm_chat", [])
    if not last_visited_places:
        raw_last_visited_places = await get_full_comment_data_by_user(tg_id)
        count_places = len(raw_last_visited_places)
        if count_places < 5:
            await message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω—É–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å –µ—â–µ {5 - count_places}.",
                reply_markup=ai_chat_keyboard,
            )
            return
        last_visited_places = [
            f"{c.name}, {c.address}" for c in raw_last_visited_places
        ]
    ai_recommendation = await recom(last_visited_places)
    recomm_chat = [
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {"\n\n".join(last_visited_places)}",
        f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_recommendation}",
    ]
    print(len(last_visited_places), len(recomm_chat))
    await state.update_data(request_list=recomm_chat, recomm_chat=recomm_chat)
    await message.answer(ai_recommendation, reply_markup=ai_chat_keyboard)


@router.message(Step.ai_chat)
async def sending_message_to_ai(message: Message, state: FSMContext):
    latest_request_to_ai = message.text
    data = await state.get_data()
    request_list = data.get("request_list", [])
    request_list.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {latest_request_to_ai}")
    ai_answer = await chat(request_list)
    if (
        ai_answer
        == "–í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ —Å–∞–π—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∞ —ç—Ç—É —Ç–µ–º—É. [–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—à–ª–æ—Å—å –≤ –ø–æ–∏—Å–∫–µ](https://ya.ru)"
    ):
        ai_answer = "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∑–∞–ø—Ä–æ—Å"
    request_list.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_answer}")
    if len(request_list) >= 10:
        del request_list[0:2]
    await state.update_data(request_list=request_list)

    await message.answer(ai_answer, reply_markup=ai_chat_keyboard)
