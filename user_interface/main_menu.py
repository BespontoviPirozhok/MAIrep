from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram import Router
from aiogram.filters import CommandStart

import datetime

from database.requests import get_user, add_user
from roles.roles_main import admin_check
from ai_services.yandex_gpt import you_mean

router = Router()

main_menu_reply = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç"),
            KeyboardButton(text="üèùÔ∏è –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
        ],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="ü§ñ –ß–∞—Ç —Å –ò–ò")],
    ],
    is_persistent=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
)

admin_menu_reply = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç"),
            KeyboardButton(text="üèùÔ∏è –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
        ],
        [
            KeyboardButton(text="‚ìÇÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é"),
            KeyboardButton(text="ü§ñ –ß–∞—Ç —Å –ò–ò"),
        ],
    ],
    is_persistent=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
)


back_reply = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],
    ],
    resize_keyboard=True,
    is_persistent=True,
)


async def return_to_user_menu(
    tg_id: int,
    msg_txt: str,
    message: Message,
) -> None:
    if await admin_check(tg_id):
        await message.answer(
            msg_txt,
            reply_markup=admin_menu_reply,
        )
    else:
        await message.answer(
            msg_txt,
            reply_markup=main_menu_reply,
        )


def pretty_date(date_str: str) -> str:
    months_ru = [
        "—è–Ω–≤–∞—Ä—è",
        "—Ñ–µ–≤—Ä–∞–ª—è",
        "–º–∞—Ä—Ç–∞",
        "–∞–ø—Ä–µ–ª—è",
        "–º–∞—è",
        "–∏—é–Ω—è",
        "–∏—é–ª—è",
        "–∞–≤–≥—É—Å—Ç–∞",
        "—Å–µ–Ω—Ç—è–±—Ä—è",
        "–æ–∫—Ç—è–±—Ä—è",
        "–Ω–æ—è–±—Ä—è",
        "–¥–µ–∫–∞–±—Ä—è",
    ]
    year, month, day = map(int, date_str.split("-"))

    return f"{day} {months_ru[month-1]} {year} –≥."


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    greetings = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º"
    tg_id = message.from_user.id
    first_name = message.from_user.first_name
    if not await get_user(tg_id):
        tg_username = message.from_user.username
        greetings = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
        await add_user(
            tg_id=tg_id,
            tg_username=tg_username,
            regist_date=datetime.datetime.now().date(),
        )
    """–ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ /start"""
    await return_to_user_menu(
        tg_id,
        f"""{greetings} –≤ –±–æ—Ç–∞ Location Chooser, {first_name}! –í–æ—Ç –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:
üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç - –ø–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –º–µ—Å—Ç, –∏—Ö –æ—Ü–µ–Ω–∫–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
üí¨ –ß–∞—Ç —Å –ò–ò - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ –¥—É—à–∞–º –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
ü™™ –ü—Ä–æ—Ñ–∏–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, –æ—Ç–∑—ã–≤–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
üèùÔ∏è –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π - –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –æ—Ç–º–µ—Ç–∫–∞ –æ –∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–∏""",
        message,
    )
