from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.requests import get_comments
from roles.roles_main import admin_check
from .search_menu import place_view_smart_reply, get_place_info_text
from .ui_main import back_reply

router = Router()


class Step(StatesGroup):  # —Å–æ—Å—Ç–æ—è–Ω–∏—è
    place_view = State()  # –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
    —Åomments_list = State()  # –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤


@router.message(Step.—Åomments_list, F.text == "–ù–∞–∑–∞–¥")
async def back_from_comments(message: Message, state: FSMContext):
    await state.set_state(Step.place_view)
    data = await state.get_data()
    place_id = data.get("place_id")
    place_info = await get_place_info_text(place_id=place_id)
    await message.answer(
        place_info,
        reply_markup=await place_view_smart_reply(
            tg_id=message.from_user.id, place_id=place_id
        ),
        parse_mode="MARKDOWN",
    )


@router.message(Step.place_view, F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
async def show_comments(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    data = await state.get_data()
    place_id = data.get("place_id")
    await state.set_state(Step.—Åomments_list)

    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    all_comments = (await get_comments(place_id=place_id, filter_empty_text=True))[::-1]

    if not all_comments:
        await message.answer(
            "üßëüíª –ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            reply_markup=await place_view_smart_reply(tg_id, place_id),
        )
        await state.set_state(Step.place_view)

    else:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        await state.update_data(all_comments=all_comments, comment_offset=0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
        await show_more_comments(message, state)


async def show_more_comments(message: Message, state: FSMContext):
    data = await state.get_data()
    all_comments = data.get("all_comments")
    offset = data.get("comment_offset")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    BATCH_SIZE = 5
    comments_batch = all_comments[offset : offset + BATCH_SIZE]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    for comment in comments_batch:
        await message.answer(
            f"{comment.comment_text}",
            reply_markup=(
                ReplyKeyboardRemove()
                if offset + BATCH_SIZE >= len(all_comments)
                else None
            ),
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º offset
    new_offset = offset + BATCH_SIZE
    await state.update_data(comment_offset=new_offset)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if new_offset < len(all_comments):
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
        more_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")],
            ],
            resize_keyboard=True,
        )
        await message.answer(
            f"–ü–æ–∫–∞–∑–∞–Ω–æ {min(new_offset, len(all_comments))} –∏–∑ {len(all_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            reply_markup=more_keyboard,
        )
    else:
        await message.answer("‚úÖ –ë–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç", reply_markup=back_reply)


@router.message(Step.—Åomments_list, F.text == "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ")
async def load_more_comments(message: Message, state: FSMContext):
    await show_more_comments(message, state)
